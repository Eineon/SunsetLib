document.addEventListener('DOMContentLoaded', function () {

  const 显隐元素 = document.querySelectorAll('.显隐');

  显隐元素.forEach(function (显隐内容) {
    // 创建 <br> 元素
    const br = document.createElement('br');

    // 将 <br> 元素插入到 .显隐内容 元素之前
    显隐内容.parentNode.insertBefore(br, 显隐内容);

    // 创建按钮元素
    const 显隐按钮 = document.createElement('button');
    显隐按钮.classList.add('显隐按钮');
    显隐按钮.text = '查看详情';

    // 将按钮插入到 <br> 元素之后
    显隐内容.parentNode.insertBefore(显隐按钮, 显隐内容);

    // 添加点击事件处理函数
    显隐按钮.addEventListener('click', () => {
      显隐按钮.text = 显隐内容.style.display === 'none' ? '隐藏详情' : '查看详情';
      显隐内容.style.display = 显隐内容.style.display === 'none' ? 'block' : 'none';
    });
  });

  const tagData = {
    '————': '——————————————————————————————————————————————————',
    'N': '这种稀有度的事物非常普遍。未标注稀有度的元素，稀有度默认为N。',
    'R': '这种稀有度的事物需要特殊的训练或特定文化的背景才有可能接触。回忆稀有度为R的事物时，检定DV会提高1点。',
    'S': '这种稀有度的事物几乎不可能被找到。回忆稀有度为R的事物时，检定DV会提高2点。',
    'U': '这种稀有度的事物是独一无二的。回忆稀有度为R的事物时，检定DV会提高4点。',
    '————': '——————————————————————————————————————————————————',
    '龙套': '单独的龙套级敌人难以对同等级的PC构成威胁，并且可以被轻松击败。',
    '————': '——————————————————————————————————————————————————',
    '附赠': '只要角色满足「前置」条件和等级要求，她就会自动习得<a href="##">附赠</a>特技，并且不计入她所能习得的特技总数中。',
    '原型': '这项特技属于一种<b>原型</b>。',
    '觉醒': '一旦习得某种<b>原型</b>的<a href="##">觉醒</a>特技，直到习得至少3个属于该<b>原型</b>的特技为止，无法习得其他的<a href="##">觉醒</a>特技。',
    '————': '——————————————————————————————————————————————————',
    '暗骰': 'GM需要暗中投掷这种效果的检定，并且不会将检定的结果公开给其他玩家。',
    '探索': '这种效果无法在冲突场景中使用。',
    '休整': '执行不具<a href="##">休整</a>标签的动作会打断这种效果。',
    '攻击': '这种效果能够让角色发起一次攻击。',
    '移动': '这种效果能够让角色移动到其他位置。',
    '操作': '角色必须物理上操作一件物品或比划手势才能使用这种效果。没有合适肢体的角色无法使用这种效果。',
    '专注': '这种效果要求使用者的精神在一定程度上保持集中和自制。使用者一旦失去意识，其造成的所有<a href="##">专注</a>效果都会立即结束。',
    '绝技': '在冲突命刻的每份刻度中，一名角色最多只能宣言1次<a href="##">绝技</a>动作。',
    '起手': '这种效果只能在使用者尚未宣言过<a href="##">攻击</a>或<a href="##">起手</a>动作的刻度中使用。',
    '连携': '这种效果只能在使用者宣言过<a href="##">攻击</a>或<a href="##">起手</a>动作的轮次中使用。',
    '架势': '这种效果只能在冲突场景中生效。架势的效果会持续到角色被击败、冲突结束、或进入另一个架势。角色在冲突命刻的每份刻度中最多只能宣言1次<a href="##">架势</a>动作。',
    '扫荡': '这种效果能令立即将角色无力化，但难以对较为强大的角色产生效果。角色的LV每比扫荡效果的等级高1级，就会在应对扫荡效果的防御检定上获得1点加值。',
    '恢复': '这种效果能够修复角色物理或精神上的损伤。但也可能助其脱离有害的处境。',
    '疾病': '这种效果会造成疾病。疾病通常是一种苦难型的处境。',
    '睡眠': '这种效果能让角色陷入沉睡或变得疲倦。',
    '心灵': '这种效果会干涉心智。<a href="##">心灵</a>效果对<a href="##">无意识</a>的角色无效。',
    '情绪': '这种效果会改变情绪。具有该标签的效果同时视为具有<span class="[TAG]心灵"></span>标签。',
    '恐惧': '这种效果会唤起恐惧的情绪。具有该标签的效果同时视为具有<span class="[TAG]情绪"></span>标签。',
    '理解': '这种效果需要目标能够理解使用者表达的信息才能发挥作用。',
    '————': '——————————————————————————————————————————————————',
    '真名': '事物的真名是其独有的波动，凝聚了它在灵界的本质和属性。<br>具有超自然属性的事物会持续释放自身的真名，这种波动只能被特殊手段侦测。',
    '侦测': '这种效果能够访问某一事物或真名的存在或方位，或是令角色能够通过他人的感官收集信息。',
    '预见': '这种效果能够决定在近未来可能发生的事件。',
    '揭示': '这种效果能够展现事物真实的样子。',
    '————': '——————————————————————————————————————————————————',
    '魔能': '这种效果具有超自然属性，并且能够克服超自然个体对自然伤害的抗性。',
    '塑体': '这种效果能够细微改变角色的外形。任何由塑体效果赋予的攻击手段都具有<span class="[TAG]魔能"></span>标签。<br>如果一名角色同时受到多个影响同一部位的塑体效果，新的效果必须成功反制现有效果才能生效。如果这些效果会影响不同的部位，则可以同时生效。',
    '变形': '这种效果能够完全改变角色的外形。如果一名角色同时受到多个变形效果，或同时受到变形与塑体效果，新的效果必须成功反制现有效果才能生效。<br>变形效果通常无法令角色变成特定的个体，只能是一类的普通一员。',
    '维度': '这种效果会改变事物所处的维度。同一事物最多只会同时受到一个维度效果影响。新的效果必须成功反制现有效果才能生效。',
    '结界': '结界会在特定时间内影响一个区域。同一区域最多只会同时受到一个结界影响。新的结界必须成功反制现有结界才能生效。',
    '诅咒': '诅咒是一种会持续造成负面影响的超自然效果。只有专门针对诅咒的效果才能解除它。',
    '即死': '即死效果会立即击破受其损伤的HG。部分即死效果可以让受影响的角色更接近死亡，或在不造成损伤的情况下直接致死。',
    '————': '——————————————————————————————————————————————————',
  };

  const efctData = {
    '————': '——————————————————————————————————————————————————',
    '前进': '目标从后场移动至中场，或从中场移动至前场。<br>位于前场的目标不会因<a href="##">前进</a>改变位置。',
    '后退': '目标从前场移动至中场，或从中场移动至后场。<br>位于后场的目标不会因<a href="##">后退</a>改变位置。',
    '扰乱': '目标随机移动至任何位置，这也可能会令目标未能改变位置。',
    '————': '——————————————————————————————————————————————————',
  };

  function insertComments(data, classPrefix, formatFunction) {
    Object.entries(data).forEach(([key, value]) => {
      document.querySelectorAll(`[class="${classPrefix}${key}"]`).forEach(el => {
        const text = el.innerHTML; // 获取标签中的文本内容
        const commentHtml = formatFunction(key, text, value); // 调用格式化函数
        el.insertAdjacentHTML('afterend', commentHtml); // 插入新的HTML
        el.remove(); // 移除原来的标签
      });
    });
  }

  // 定义格式化函数
  function tagFormat(key, text, value) {
    return `<div class="CMT"><a href="##">${key}${text}</a><div class="show">${value}</div></div>`;
  }

  function efctFormat(key, text, value) {
    return `<div class="CMT"><a href="##">${text}</a><div class="show">● <b>${key}</b><br>${value}</div></div>`;
  }

  // 调用函数处理 tagData 和 efctData
  insertComments(tagData, '[TAG]', tagFormat);
  insertComments(efctData, '[EFCT]', efctFormat);

  // 添加鼠标事件处理
  document.querySelectorAll('.CMT').forEach(cmt => {
    let timeout;

    cmt.addEventListener('mouseenter', () => {
      clearTimeout(timeout); // 清除任何现存的超时
      const showElement = cmt.querySelector('.show');
      showElement.style.display = 'block'; // 显示提示窗
      showElement.style.opacity = '1'; // 确保透明度为1
    });

    cmt.addEventListener('mouseleave', () => {
      const showElement = cmt.querySelector('.show');
      showElement.style.opacity = '0'; // 设置透明度为0以开始渐变消失
      timeout = setTimeout(() => {
        showElement.style.display = 'none'; // 在透明度变为0后隐藏提示窗
      }, 500); // 设置延迟时间
    });
  });
});
